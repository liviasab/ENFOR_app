var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "fs-extra", "path", "os", "console", "@clack/prompts", "util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addGluestackConfig = void 0;
    const fs_extra_1 = __importDefault(require("fs-extra"));
    const path_1 = __importStar(require("path"));
    const os_1 = __importDefault(require("os"));
    const console_1 = require("console");
    const prompts_1 = require("@clack/prompts");
    const util_1 = __importDefault(require("util"));
    const copyAsync = util_1.default.promisify(fs_extra_1.default.copy);
    const homeDir = os_1.default.homedir();
    const currDir = process.cwd();
    const sourcePath = path_1.default.join(homeDir, '.gluestack', 'cache', 'gluestack-ui', 'example', 'storybook', 'src', 'ui-components');
    function addGluestackConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fs_extra_1.default.existsSync((0, path_1.join)(currDir, 'gluestack-ui.config.ts'))) {
                (0, console_1.warn)('Adding config file in current directory.');
                yield addConfig(sourcePath, currDir);
            }
        });
    }
    exports.addGluestackConfig = addGluestackConfig;
    const addConfig = (sourcePath, configTargetPath) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            // Copy Gluestack UI config to root
            const gluestackConfig = yield fs_extra_1.default.readFile(path_1.default.resolve(sourcePath, '../', 'gluestack-ui.config.ts'), 'utf8');
            yield fs_extra_1.default.writeFile(path_1.default.join(configTargetPath, 'gluestack-ui.config.ts'), gluestackConfig);
        }
        catch (err) {
            prompts_1.log.error(JSON.stringify(err));
        }
    });
});
// const initialSetup = async () => {
//   await addProvider(sourcePath, currDir);
//   addIndexFile(cu);
//   addDependencies();
// };
// const addProvider = async (sourcePath: string, targetPath: string) => {
//   try {
//     // Copy Provider and styled folder
//     await copyAsync(
//       path.join(sourcePath, 'Provider'),
//       path.join(targetPath, 'core', 'GluestackUIProvider')
//     );
//     await copyAsync(
//       path.join(sourcePath, 'styled'),
//       path.join(targetPath, 'core', 'styled')
//     );
//     fs.unlinkSync(
//       path.join(targetPath, 'core', 'GluestackUIProvider', 'config.json')
//     );
//     fs.unlinkSync(path.join(targetPath, 'core', 'styled', 'config.json'));
//   } catch (err) {
//     log.error(`\x1b[31mError: ${(err as Error).message}\x1b[0m`);
//   }
// };
