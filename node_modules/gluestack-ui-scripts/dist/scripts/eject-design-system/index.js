var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
(function (factory) {
  if (typeof module === "object" && typeof module.exports === "object") {
    var v = factory(require, exports);
    if (v !== undefined) module.exports = v;
  } else if (typeof define === "function" && define.amd) {
    define(["require", "exports"], factory);
  }
})(function (require, exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true,
  });
  exports.ejectDesignSystem = void 0;
  const fs = require("fs-extra");
  const path = require("path");
  const chalk = require("chalk");
  const findWorkspaceRoot = require("find-yarn-workspace-root");
  const rootPath = process.cwd(); // You can customize this if needed
  const workspaceRoot = findWorkspaceRoot(rootPath);
  // Define the paths
  const warning = chalk.hex("#ffcc00");
  const green = chalk.hex("#00FF00");
  const ejectDesignSystem = () =>
    __awaiter(void 0, void 0, void 0, function* () {
      let srcPath;
      // Check if @gluestack-ui/config exists in node_modules
      if (
        fs.existsSync(
          path.join(rootPath, "node_modules", "@gluestack-ui/themed")
        )
      ) {
        srcPath = path.join(
          rootPath,
          "node_modules",
          "@gluestack-ui/themed",
          "src",
          "components",
          "styled"
        );
        copyFiles(srcPath);
      } else if (
        fs.existsSync(
          path.join(workspaceRoot, "node_modules", "@gluestack-ui/themed")
        )
      ) {
        srcPath = path.join(
          workspaceRoot,
          "node_modules",
          "@gluestack-ui/themed",
          "src",
          "components",
          "styled"
        );
        copyFiles(srcPath);
      } else {
        console.error(
          chalk.red.bold("❌ Error:"),
          "The '@gluestack-ui/themed' package was not found in node_modules. Please run",
          chalk.cyan("npm install @gluestack-ui/themed@latest"),
          "to install it."
        );
      }
    });
  exports.ejectDesignSystem = ejectDesignSystem;
  function copyFiles(srcPath) {
    console.log(chalk.yellow("⏳ Ejecting Components & Theme. Please wait..."));
    if (fs.existsSync(srcPath)) {
      try {
        // Copy the src folder to the root directory
        fs.copySync(srcPath, path.join(rootPath, "components"));
        const successMessage = chalk.green(
          `✨ Congratulations! Your styled components have been successfully ejected and can now be found in the ${green(
            `'components'`
          )} folder. ✨`
        );
        // Provide instructions for integrating the theme
        const instructionsBox = `${chalk.gray(
          `      ┌───────────────────────────────────────────────────────────────────────────────────────────┐`
        )}
    ${chalk.gray(
      `│   // ${chalk.cyan(
        "App.tsx"
      )}                                                                              │`
    )}
    ${chalk.gray(
      `│   // Relative path to your ejected components                                             │`
    )}
    ${chalk.gray(
      `│   ${chalk.cyan("import { GluestackUIProvider }")} from ${chalk.magenta(
        "'../components/GluestackUIProvider'"
      )};                │`
    )}
    ${chalk.gray(
      `│                                                                                           │`
    )}
    ${chalk.gray(
      `│   function App() {                                                                        │`
    )}
    ${chalk.gray(
      `│     return (                                                                              │`
    )}
    ${chalk.gray(
      `│       <${chalk.cyan(
        "GluestackUIProvider"
      )} >                                                              │`
    )}
    ${chalk.gray(
      `│         {/* Your app code */}                                                             │`
    )}
    ${chalk.gray(
      `│       </${chalk.cyan(
        "GluestackUIProvider"
      )}>                                                              │`
    )}
    ${chalk.gray(
      `│     );                                                                                    │`
    )}
    ${chalk.gray(
      `│   }                                                                                       │`
    )}
    ${chalk.gray(
      `│                                                                                           │`
    )}
    ${chalk.gray(
      `└───────────────────────────────────────────────────────────────────────────────────────────┘`
    )}`;
        // Create a closing message
        const closingMessage = chalk.bold(
          "Enjoy the enhanced beauty and functionality of your customized theme! 🚀✨"
        );
        // Combine and print the message
        console.log(successMessage);
        console.log(` 
    ${chalk.yellow(
      `To use it, simply import the configuration & pass it to the ${warning(
        "GluestackUIProvider"
      )} component')}`
    )}                                             
    ${chalk.yellow("into your app like shown below:")}         `);
        console.log(instructionsBox);
        console.log(closingMessage);
      } catch (err) {
        console.error("Error copying src folder:", err);
      }
    } else {
      console.log(` 
  ${chalk.red(
    `Please update the version of @gluestack-ui/themed and then try again.`
  )}                                                 `);
    }
  }
});
